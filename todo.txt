WeeWikiPaint
In Agile, one technique is Minimum Marketing Feature (MMF) is sth that the market cares about.
Does not have to be money, It is sth that market cares.

For WeeWikiPaint: We build a collaborative, real time application.
Features
- marketing home page (DONE, deployed to heroku)
- single-user painting on home page
- collaborative painting page (very basic)
- wiki-fy the pages
- more complex painting ?
- more collaborative features

User Stories (way of showing business process)
- "hello world" server (DONE)
- Serve a one-file homepage (DONE)
- Serve 404 errors for everything else (DONE)
- Do we want a custom 404 page (DONE)
- Marketing copy (Done deployed to heroku)
- Publish to Internet (DONE Published to heroku)
---------------CLIENT SIDE TESTING------------------------
- Create empty drawing area
- Draw one line

To get above stories done, we need engineering tasks. Engineering tasks are to do's for programmers
Engineering Tasks
- Spike serving a file (DONE)
- TDD file serving (DONE)
- design work (DONE)
- Exploratory testing (DONE)
- Write end to end integration test (DONE)
- Write server launch code (DONE)
- Create a very simple HTTP Server (DONE)
- automated build (DONE)
- static code analysis (Lint) (DONE)
- Bring in all options
- continuous integration (DONE)
- server-side testing (DONE)
- Create a very simple HTTP server (DONE)
- client-side testing-------------
- Test drawing tool (Raphael?)
- Integrate into HTML Page

To do on current task
- Run testacular/karma from Jake Script
- make build fail when lint fails ->DONE
- Choose framework -> DONE
- make lint fail when test fail -> DONE
- Spike HTTP Server with NODE -> DONE
- Test-drive Server  -> DONE
- Modify build script to enforce NODE version (DONE
_ Integrate (DONE)
- Put homepage.html in a good directory (DONE)
- Get Testacular/karma running manually with one browser (DONE_
- Figure out best assertion framework (DONE, expect.js)
- multiple browser(DONE)
- automation
- Set-up client side linting options (DONE)
- Automatically check that we're testing against all supported browsers (DONE)
- Move testacular.conf.js/karma.conf.js to a better location
- Unify our test file location configuration (it's curretly jakefile & testacular/karma.conf.js configuration)

FUTURE IDEAS
- Add License.TXT (DONE)
- Create 'fail fast' assertion code
- Abstract test framework? (swap out a different framework to make sure abstraction works)
- Static checking of function parameters (rather than writing tests)
- Handle errors properly in server.js
- server.stop() waits for open connections to close (e.g., firefoxx keeps open connection).
  Make it forcibly close?
-Remove Node Version duplication between package.json and jakeFile.js
- Fix HttpGet duplication

Notes:
-Nodeunit does not work properly on windows
